{"version":3,"sources":["components/element/Elem.js","components/todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Elem","elem","onSelect","id","className","icon","faList","onClick","faTrash","Todo","input","setInput","list","setList","err","setErr","minlength","maxlength","type","value","placeholder","onChange","event","target","prev","faPlusCircle","faArrowCircleUp","length","map","index","key","filter","arr","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVAuBeA,MAlBf,YAAuC,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,SAAUC,EAAM,EAANA,GAC9B,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,QACf,kBAAC,IAAD,CAAiBA,UAAU,UAAUC,KAAMC,MAD3C,WACgE,4BAAKL,IAGrE,kBAAC,IAAD,CACEG,UAAU,aACVG,QAAS,WACPL,EAASC,IAEXE,KAAMG,QCoDCC,MA/Df,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,OAYnD,OACE,yBAAKX,UAAU,kBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,eACb,2BACEA,UAAU,QACVY,UAAU,IAAIC,UAAU,KACxBC,KAAK,OACLC,MAAOT,EACPU,YAAY,uBACZC,SAAU,SAACC,GAAD,OAAWX,EAASW,EAAMC,OAAOJ,UAE7C,kBAAC,IAAD,CAAiBf,UAAU,UAAUG,QAvBjC,WACVQ,EAAO,IACPF,GAAQ,SAACW,GACP,MAAc,KAAVd,EACI,GAAN,mBAAWc,GAAX,CAAiBd,KAEVG,EAAQ,YAAIW,IAAQT,EAAO,4CAGtCJ,EAAS,KAcgDN,KAAMoB,QAG7D,yBAAKrB,UAAU,QACb,4BACGU,EAAO,oCAAE,yBAAKV,UAAU,SAASU,GAAU,4BAAQV,UAAU,aAAaG,QAAU,WAAKQ,EAAO,MAAQ,kBAAC,IAAD,CAAiBV,KAAMqB,MAApF,2BAG1C,oCACmB,IAAhBd,EAAKe,OACJ,oCACGf,EAAKgB,KAAI,SAAC3B,EAAM4B,GACf,OACE,kBAAC,EAAD,CACEC,IAAKD,EACL1B,GAAI0B,EACJ5B,KAAMA,EACNC,SAAU,SAACC,GACTU,GAAQ,SAACW,GACP,OAAOA,EAAKO,QAAO,SAACC,EAAKH,GACvB,OAAOA,IAAU1B,eAQ5B,yBAAKC,UAAU,WAAf,mCC/BJ6B,MArBf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNxB,EADM,KACCC,EADD,OAEWuB,mBAAS,IAFpB,mBAENtB,EAFM,KAEAC,EAFA,OAGSqB,mBAAS,IAHlB,mBAGNpB,EAHM,KAGDC,EAHC,KAIb,OACE,yBAAKX,UAAU,OACb,yCACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEM,MAAOA,EACPE,KAAMA,EACND,SAAUA,EACVE,QAASA,EACTC,IAAKA,EACLC,OAAQA,OCREoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c5f89a1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faList } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Elem({ elem, onSelect, id }) {\r\n  return (\r\n    <div className=\"elem\">\r\n      <div className=\"text\">\r\n      <FontAwesomeIcon className=\"checked\" icon={faList}/>&nbsp;&nbsp;<li>{elem}</li>\r\n      </div>\r\n\r\n      <FontAwesomeIcon\r\n        className=\"btn-delete\"\r\n        onClick={() => {\r\n          onSelect(id);\r\n        }}\r\n        icon={faTrash}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Elem;\r\n","import React from \"react\";\r\nimport Elem from \"../element/Elem\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faArrowCircleUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Todo({ input, setInput, list, setList, err, setErr }) {\r\n  const add = () => {\r\n    setErr(\"\");\r\n    setList((prev) => {\r\n      if (input !== \"\") {\r\n        return [...prev, input];\r\n      } else {\r\n        return setList([...prev]), setErr(\"Insert task to continue in your list\");\r\n      }\r\n    });\r\n    setInput(\"\");\r\n  };\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <div className=\"add-container\">\r\n        <div className=\"add-content\">\r\n          <input\r\n            className=\"input\"\r\n            minlength=\"1\" maxlength=\"65\"\r\n            type=\"text\"\r\n            value={input}\r\n            placeholder=\"insert you task here\"\r\n            onChange={(event) => setInput(event.target.value)}\r\n          ></input>\r\n          <FontAwesomeIcon className=\"btn-add\" onClick={add} icon={faPlusCircle} />\r\n        </div>\r\n      </div>\r\n      <div className=\"list\">\r\n        <ol>\r\n          {err ? (<><div className=\"error\">{err}</div><button className=\"btn-return\" onClick={(()=>{setErr(\"\")})} ><FontAwesomeIcon icon={faArrowCircleUp}/>&nbsp;&nbsp;Return to list</button></>\r\n            \r\n          ) : (\r\n            <>\r\n              {list.length !== 0 ? (\r\n                <>\r\n                  {list.map((elem, index) => {\r\n                    return (\r\n                      <Elem\r\n                        key={index}\r\n                        id={index}\r\n                        elem={elem}\r\n                        onSelect={(id) => {\r\n                          setList((prev) => {\r\n                            return prev.filter((arr, index) => {\r\n                              return index !== id;\r\n                            });\r\n                          });\r\n                        }}\r\n                      />\r\n                    );\r\n                  })}\r\n                </>\r\n              ) : (<div className=\"no-task\">Insert task to create list</div>\r\n                \r\n              )}\r\n            </>\r\n          )}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"./components/element/elem.css\";\nimport \"./components/todo/todo.css\";\nimport Todo from \"./components/todo/Todo\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [list, setList] = useState([]);\n  const [err, setErr] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <h1>Todo List</h1>\n      <div className=\"container\">\n        <Todo\n          input={input}\n          list={list}\n          setInput={setInput}\n          setList={setList}\n          err={err}\n          setErr={setErr}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}